From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: winxpqq955 <gwinxpqq955@gmail.com>
Date: Mon, 16 Jun 2025 16:48:36 +0800
Subject: [PATCH] remove lj gui


diff --git a/net/minecraft/server/Main.java b/net/minecraft/server/Main.java
index 06dd231871c68284d42dd9573ca03ecc3b677b75..535ebe37112d0c452fad969512ab1fcf3ea2fa90 100644
--- a/net/minecraft/server/Main.java
+++ b/net/minecraft/server/Main.java
@@ -344,10 +344,6 @@ public class Main {
                     /*
                     dedicatedServer1.setId(optionSet.valueOf(optionSpec12));
                      */
-                    boolean flag = !optionSet.has("nogui") && !optionSet.nonOptionArguments().contains("nogui");
-                    if (flag && !GraphicsEnvironment.isHeadless()) {
-                        dedicatedServer1.showGui();
-                    }
 
                     if (optionSet.has("port")) {
                         int port = (Integer) optionSet.valueOf("port");
diff --git a/net/minecraft/server/MinecraftServer.java b/net/minecraft/server/MinecraftServer.java
index ae220a732c78ab076261f20b5a54c71d7fceb407..95c2b7d33ecded2a97ecc2bf8d7fc40c675911dd 100644
--- a/net/minecraft/server/MinecraftServer.java
+++ b/net/minecraft/server/MinecraftServer.java
@@ -1187,15 +1187,6 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             long tickSection = Util.getNanos();
             long currentTime;
             // Paper end - further improve server tick loop
-            // Paper start - Add onboarding message for initial server start
-            if (io.papermc.paper.configuration.GlobalConfiguration.isFirstStart) {
-                LOGGER.info("*************************************************************************************");
-                LOGGER.info("This is the first time you're starting this server.");
-                LOGGER.info("It's recommended you read our 'Getting Started' documentation for guidance.");
-                LOGGER.info("View this and more helpful information here: https://docs.papermc.io/paper/next-steps");
-                LOGGER.info("*************************************************************************************");
-            }
-            // Paper end - Add onboarding message for initial server start
 
             while (this.running) {
                 long l;
diff --git a/net/minecraft/server/dedicated/DedicatedServer.java b/net/minecraft/server/dedicated/DedicatedServer.java
index 664e98c5771bc32cfbb9ff3d74fbcc605bb36e66..215b7a868a19ae863fa9cfa38e5de7326b840189 100644
--- a/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/net/minecraft/server/dedicated/DedicatedServer.java
@@ -32,7 +32,6 @@ import net.minecraft.server.ServerInterface;
 import net.minecraft.server.ServerLinks;
 import net.minecraft.server.Services;
 import net.minecraft.server.WorldStem;
-import net.minecraft.server.gui.MinecraftServerGui;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.server.level.progress.ChunkProgressListenerFactory;
@@ -71,8 +70,6 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
     private RconThread rconThread;
     public DedicatedServerSettings settings;
     @Nullable
-    private MinecraftServerGui gui;
-    @Nullable
     private final ServerTextFilter serverTextFilter;
     @Nullable
     private RemoteSampleLogger tickTimeLogger;
@@ -394,10 +391,6 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
             this.serverTextFilter.close();
         }
 
-        if (this.gui != null) {
-            this.gui.close();
-        }
-
         if (this.rconThread != null) {
             this.rconThread.stopNonBlocking(); // Paper - don't wait for remote connections
         }
@@ -508,15 +501,9 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         return this.getMotd();
     }
 
-    public void showGui() {
-        if (this.gui == null) {
-            this.gui = MinecraftServerGui.showFrameFor(this);
-        }
-    }
-
     @Override
     public boolean hasGui() {
-        return this.gui != null;
+        return super.hasGui();
     }
 
     @Override
diff --git a/net/minecraft/server/gui/MinecraftServerGui.java b/net/minecraft/server/gui/MinecraftServerGui.java
deleted file mode 100644
index f262a7c5ae4e7d56f16f5c0f4f145a2e428abbe4..0000000000000000000000000000000000000000
--- a/net/minecraft/server/gui/MinecraftServerGui.java
+++ /dev/null
@@ -1,216 +0,0 @@
-package net.minecraft.server.gui;
-
-import com.google.common.collect.Lists;
-import com.mojang.logging.LogQueues;
-import com.mojang.logging.LogUtils;
-import java.awt.BorderLayout;
-import java.awt.Dimension;
-import java.awt.Font;
-import java.awt.event.FocusAdapter;
-import java.awt.event.FocusEvent;
-import java.awt.event.WindowAdapter;
-import java.awt.event.WindowEvent;
-import java.util.Collection;
-import java.util.concurrent.atomic.AtomicBoolean;
-import javax.swing.JComponent;
-import javax.swing.JFrame;
-import javax.swing.JList;
-import javax.swing.JPanel;
-import javax.swing.JScrollBar;
-import javax.swing.JScrollPane;
-import javax.swing.JTextArea;
-import javax.swing.JTextField;
-import javax.swing.SwingUtilities;
-import javax.swing.UIManager;
-import javax.swing.border.EtchedBorder;
-import javax.swing.border.TitledBorder;
-import javax.swing.text.BadLocationException;
-import javax.swing.text.Document;
-import net.minecraft.DefaultUncaughtExceptionHandler;
-import net.minecraft.server.dedicated.DedicatedServer;
-import org.slf4j.Logger;
-
-public class MinecraftServerGui extends JComponent {
-    private static final Font MONOSPACED = new Font("Monospaced", 0, 12);
-    private static final Logger LOGGER = LogUtils.getLogger();
-    private static final String TITLE = "Minecraft server";
-    private static final String SHUTDOWN_TITLE = "Minecraft server - shutting down!";
-    private final DedicatedServer server;
-    private Thread logAppenderThread;
-    private final Collection<Runnable> finalizers = Lists.newArrayList();
-    final AtomicBoolean isClosing = new AtomicBoolean();
-
-    public static MinecraftServerGui showFrameFor(final DedicatedServer server) {
-        try {
-            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
-        } catch (Exception var3) {
-        }
-
-        final JFrame jFrame = new JFrame("Minecraft server");
-        final MinecraftServerGui minecraftServerGui = new MinecraftServerGui(server);
-        jFrame.setDefaultCloseOperation(2);
-        jFrame.add(minecraftServerGui);
-        jFrame.pack();
-        jFrame.setLocationRelativeTo(null);
-        jFrame.setVisible(true);
-        // Paper start - Improve ServerGUI
-        jFrame.setName("Minecraft server");
-        try {
-            jFrame.setIconImage(javax.imageio.ImageIO.read(java.util.Objects.requireNonNull(MinecraftServerGui.class.getClassLoader().getResourceAsStream("logo.png"))));
-        } catch (java.io.IOException ignore) {
-        }
-        // Paper end - Improve ServerGUI
-        jFrame.addWindowListener(new WindowAdapter() {
-            @Override
-            public void windowClosing(WindowEvent event) {
-                if (!minecraftServerGui.isClosing.getAndSet(true)) {
-                    jFrame.setTitle("Minecraft server - shutting down!");
-                    server.halt(true);
-                    minecraftServerGui.runFinalizers();
-                }
-            }
-        });
-        minecraftServerGui.addFinalizer(jFrame::dispose);
-        minecraftServerGui.start();
-        return minecraftServerGui;
-    }
-
-    private MinecraftServerGui(DedicatedServer server) {
-        this.server = server;
-        this.setPreferredSize(new Dimension(854, 480));
-        this.setLayout(new BorderLayout());
-
-        try {
-            this.add(this.buildOnboardingPanel(), "North"); // Paper - Add onboarding message for initial server start
-            this.add(this.buildChatPanel(), "Center");
-            this.add(this.buildInfoPanel(), "West");
-        } catch (Exception var3) {
-            LOGGER.error("Couldn't build server GUI", (Throwable)var3);
-        }
-    }
-
-    public void addFinalizer(Runnable finalizer) {
-        this.finalizers.add(finalizer);
-    }
-
-    private JComponent buildInfoPanel() {
-        JPanel jPanel = new JPanel(new BorderLayout());
-        com.destroystokyo.paper.gui.GuiStatsComponent statsComponent = new com.destroystokyo.paper.gui.GuiStatsComponent(this.server); // Paper - Make GUI graph fancier
-        this.finalizers.add(statsComponent::close);
-        jPanel.add(statsComponent, "North");
-        jPanel.add(this.buildPlayerPanel(), "Center");
-        jPanel.setBorder(new TitledBorder(new EtchedBorder(), "Stats"));
-        return jPanel;
-    }
-
-    private JComponent buildPlayerPanel() {
-        JList<?> jList = new PlayerListComponent(this.server);
-        JScrollPane jScrollPane = new JScrollPane(jList, 22, 30);
-        jScrollPane.setBorder(new TitledBorder(new EtchedBorder(), "Players"));
-        return jScrollPane;
-    }
-
-    private JComponent buildChatPanel() {
-        JPanel jPanel = new JPanel(new BorderLayout());
-        JTextArea jTextArea = new JTextArea();
-        JScrollPane jScrollPane = new JScrollPane(jTextArea, 22, 30);
-        jTextArea.setEditable(false);
-        jTextArea.setFont(MONOSPACED);
-        JTextField jTextField = new JTextField();
-        jTextField.addActionListener(actionEvent -> {
-            String trimmed = jTextField.getText().trim();
-            if (!trimmed.isEmpty()) {
-                this.server.handleConsoleInput(trimmed, this.server.createCommandSourceStack());
-            }
-
-            jTextField.setText("");
-        });
-        jTextArea.addFocusListener(new FocusAdapter() {
-            @Override
-            public void focusGained(FocusEvent event) {
-            }
-        });
-        jPanel.add(jScrollPane, "Center");
-        jPanel.add(jTextField, "South");
-        jPanel.setBorder(new TitledBorder(new EtchedBorder(), "Log and chat"));
-        this.logAppenderThread = new Thread(() -> {
-            String string;
-            while ((string = LogQueues.getNextLogEvent("ServerGuiConsole")) != null) {
-                this.print(jTextArea, jScrollPane, string);
-            }
-        });
-        this.logAppenderThread.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(LOGGER));
-        this.logAppenderThread.setDaemon(true);
-        return jPanel;
-    }
-
-    public void start() {
-        this.logAppenderThread.start();
-    }
-
-    public void close() {
-        if (!this.isClosing.getAndSet(true)) {
-            this.runFinalizers();
-        }
-    }
-
-    void runFinalizers() {
-        this.finalizers.forEach(Runnable::run);
-    }
-
-    private static final java.util.regex.Pattern ANSI = java.util.regex.Pattern.compile("\\e\\[[\\d;]*[^\\d;]"); // CraftBukkit // Paper
-    public void print(JTextArea textArea, JScrollPane scrollPane, String line) {
-        if (!SwingUtilities.isEventDispatchThread()) {
-            SwingUtilities.invokeLater(() -> this.print(textArea, scrollPane, line));
-        } else {
-            Document document = textArea.getDocument();
-            JScrollBar verticalScrollBar = scrollPane.getVerticalScrollBar();
-            boolean flag = false;
-            if (scrollPane.getViewport().getView() == textArea) {
-                flag = verticalScrollBar.getValue() + verticalScrollBar.getSize().getHeight() + MONOSPACED.getSize() * 4 > verticalScrollBar.getMaximum();
-            }
-
-            try {
-                document.insertString(document.getLength(), MinecraftServerGui.ANSI.matcher(line).replaceAll(""), null); // CraftBukkit
-            } catch (BadLocationException var8) {
-            }
-
-            if (flag) {
-                verticalScrollBar.setValue(Integer.MAX_VALUE);
-            }
-        }
-    }
-
-    // Paper start - Add onboarding message for initial server start
-    private JComponent buildOnboardingPanel() {
-        String onboardingLink = "https://docs.papermc.io/paper/next-steps";
-        JPanel jPanel = new JPanel();
-
-        javax.swing.JLabel jLabel = new javax.swing.JLabel("If you need help setting up your server you can visit:");
-        jLabel.setFont(MinecraftServerGui.MONOSPACED);
-
-        javax.swing.JLabel link = new javax.swing.JLabel("<html><u> " + onboardingLink + "</u></html>");
-        link.setFont(MinecraftServerGui.MONOSPACED);
-        link.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
-        link.addMouseListener(new java.awt.event.MouseAdapter() {
-            @Override
-            public void mouseClicked(final java.awt.event.MouseEvent e) {
-                try {
-                    java.awt.Desktop.getDesktop().browse(java.net.URI.create(onboardingLink));
-                } catch (java.io.IOException exception) {
-                    LOGGER.error("Unable to find a default browser. Please manually visit the website: " + onboardingLink, exception);
-                } catch (UnsupportedOperationException exception) {
-                    LOGGER.error("This platform does not support the BROWSE action. Please manually visit the website: " + onboardingLink, exception);
-                } catch (SecurityException exception) {
-                    LOGGER.error("This action has been denied by the security manager. Please manually visit the website: " + onboardingLink, exception);
-                }
-            }
-        });
-
-        jPanel.add(jLabel);
-        jPanel.add(link);
-
-        return jPanel;
-    }
-    // Paper end - Add onboarding message for initial server start
-}
diff --git a/net/minecraft/server/gui/PlayerListComponent.java b/net/minecraft/server/gui/PlayerListComponent.java
deleted file mode 100644
index f5ba0c9a4c3f9eaa38eeb689de915c25c7165433..0000000000000000000000000000000000000000
--- a/net/minecraft/server/gui/PlayerListComponent.java
+++ /dev/null
@@ -1,27 +0,0 @@
-package net.minecraft.server.gui;
-
-import java.util.Vector;
-import javax.swing.JList;
-import net.minecraft.server.MinecraftServer;
-
-public class PlayerListComponent extends JList<String> {
-    private final MinecraftServer server;
-    private int tickCount;
-
-    public PlayerListComponent(MinecraftServer server) {
-        this.server = server;
-        server.addTickable(this::tick);
-    }
-
-    public void tick() {
-        if (this.tickCount++ % 20 == 0) {
-            Vector<String> list = new Vector<>();
-
-            for (int i = 0; i < this.server.getPlayerList().getPlayers().size(); i++) {
-                list.add(this.server.getPlayerList().getPlayers().get(i).getGameProfile().getName());
-            }
-
-            this.setListData(list);
-        }
-    }
-}
diff --git a/net/minecraft/server/gui/StatsComponent.java b/net/minecraft/server/gui/StatsComponent.java
deleted file mode 100644
index 35fd539eb2bfe60ad17ab1e558a01273666acc54..0000000000000000000000000000000000000000
--- a/net/minecraft/server/gui/StatsComponent.java
+++ /dev/null
@@ -1,82 +0,0 @@
-package net.minecraft.server.gui;
-
-import java.awt.Color;
-import java.awt.Dimension;
-import java.awt.Graphics;
-import java.text.DecimalFormat;
-import java.text.DecimalFormatSymbols;
-import java.util.Locale;
-import javax.swing.JComponent;
-import javax.swing.Timer;
-import net.minecraft.Util;
-import net.minecraft.server.MinecraftServer;
-import net.minecraft.util.TimeUtil;
-
-public class StatsComponent extends JComponent {
-    private static final DecimalFormat DECIMAL_FORMAT = Util.make(
-        new DecimalFormat("########0.000"), decimalFormat -> decimalFormat.setDecimalFormatSymbols(DecimalFormatSymbols.getInstance(Locale.ROOT))
-    );
-    private final int[] values = new int[256];
-    private int vp;
-    private final String[] msgs = new String[11];
-    private final MinecraftServer server;
-    private final Timer timer;
-
-    public StatsComponent(MinecraftServer server) {
-        this.server = server;
-        this.setPreferredSize(new Dimension(456, 246));
-        this.setMinimumSize(new Dimension(456, 246));
-        this.setMaximumSize(new Dimension(456, 246));
-        this.timer = new Timer(500, actionEvent -> this.tick());
-        this.timer.start();
-        this.setBackground(Color.BLACK);
-    }
-
-    private void tick() {
-        long l = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
-        // Paper start - Improve ServerGUI
-        double[] tps = org.bukkit.Bukkit.getTPS();
-        String[] tpsAvg = new String[tps.length];
-
-        for (int g = 0; g < tps.length; g++) {
-            tpsAvg[g] = format(tps[g]);
-        }
-        this.msgs[0] = "Memory use: " + l / 1024L / 1024L + " mb (" + Runtime.getRuntime().freeMemory() * 100L / Runtime.getRuntime().maxMemory() + "% free)";
-        this.msgs[1] = "Avg tick: " + DECIMAL_FORMAT.format((double)this.server.getAverageTickTimeNanos() / TimeUtil.NANOSECONDS_PER_MILLISECOND) + " ms";
-        this.msgs[2] = "TPS from last 1m, 5m, 15m: " + String.join(", ", tpsAvg);
-        // Paper end - Improve ServerGUI
-        this.values[this.vp++ & 0xFF] = (int)(l * 100L / Runtime.getRuntime().maxMemory());
-        this.repaint();
-    }
-
-    @Override
-    public void paint(Graphics graphics) {
-        graphics.setColor(new Color(16777215));
-        graphics.fillRect(0, 0, 456, 246);
-
-        for (int i = 0; i < 256; i++) {
-            int i1 = this.values[i + this.vp & 0xFF];
-            graphics.setColor(new Color(i1 + 28 << 16));
-            graphics.fillRect(i, 100 - i1, 1, i1);
-        }
-
-        graphics.setColor(Color.BLACK);
-
-        for (int i = 0; i < this.msgs.length; i++) {
-            String string = this.msgs[i];
-            if (string != null) {
-                graphics.drawString(string, 32, 116 + i * 16);
-            }
-        }
-    }
-
-    public void close() {
-        this.timer.stop();
-    }
-
-    // Paper start - Improve ServerGUI
-    private static String format(double tps) {
-        return (( tps > 21.0 ) ? "*" : "") + Math.min(Math.round(tps * 100.0) / 100.0, 20.0); // only print * at 21, we commonly peak to 20.02 as the tick sleep is not accurate enough, stop the noise
-    }
-    // Paper end - Improve ServerGUI
-}
diff --git a/net/minecraft/server/gui/package-info.java b/net/minecraft/server/gui/package-info.java
deleted file mode 100644
index 70cd2f1ddfb6b8f619e86158bca8ef6a9edc991d..0000000000000000000000000000000000000000
--- a/net/minecraft/server/gui/package-info.java
+++ /dev/null
@@ -1,8 +0,0 @@
-@ParametersAreNonnullByDefault
-@MethodsReturnNonnullByDefault
-@FieldsAreNonnullByDefault
-package net.minecraft.server.gui;
-
-import javax.annotation.ParametersAreNonnullByDefault;
-import net.minecraft.FieldsAreNonnullByDefault;
-import net.minecraft.MethodsReturnNonnullByDefault;
